testing = mixtures[-inTrain,]
names(training)
plot(data = training, CompressiveStrength, color = Cement)
plot(data = training, training$CompressiveStrength, color = Cement)
plot(data = training, training$CompressiveStrength, color = training$Cement)
plot(data = training, training$CompressiveStrength, color = training$Age)
head(training)
library(dplyr)
library(Hmisc)
load(Hmisc)
install.packages("Hmisc")
library(Hmisc)
training <- mutate(training, index = 1:nrow(training))
cutIndex <- cut2(training$index, g = 10)
breaks <- 10
qplot(index, CompressiveStrength, data = training, color = cut2(training$Cement, g = breaks))
names(training)
qplot(index, CompressiveStrength, data = training, color = cut2(training$BlastFurnaceSlag, g = breaks))
qplot(index, CompressiveStrength, data = training, color = cut2(training$FlyAsh, g = breaks))
qplot(index, CompressiveStrength, data = training, color = cut2(training$Water, g = breaks))
qplot(index, CompressiveStrength, data = training, color = cut2(training$Superplasticizer, g = breaks))
qplot(index, CompressiveStrength, data = training, color = cut2(training$CourseAggregate, g = breaks))
qplot(index, CompressiveStrength, data = training, color = cut2(training$CoarseAggregate, g = breaks))
qplot(index, CompressiveStrength, data = training, color = cut2(training$FineAggregate, g = breaks))
qplot(index, CompressiveStrength, data = training, color = cut2(training$Age, g = breaks))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
histogram(training$Superplasticizer)
histogram(log(training$Superplasticizer  +1 ))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ILdata <- grep("^[Ii][Ll].*", names(training))
names(ILdata)
trainingA <-training[, c(names(training)[ILdata], "diagnosis")]
names(trainingA)
testingA <-testing[, c(names(testing)[ILdata], "diagnosis")]
names(testingA)
a <- preProcess(training, method = c("center", "scale", "pca", thresh = 0.9))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ILdata <- grep("^[Ii][Ll].*", names(training))
preObj <- preProcess(training[, IL_col_idx], method=c("center", "scale", "pca"), thresh=0.9)
preObj <- preProcess(training[, ILdata], method=c("center", "scale", "pca"), thresh=0.9)
preObj
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ILdata <- grep("^[Ii][Ll].*", names(training))
trainingA <-training[, c(names(training)[ILdata], "diagnosis")]
names(trainingA)
testingA <-testing[, c(names(testing)[ILdata], "diagnosis")]
names(testingA)
nonPCA <- train(diagnosis ~ ., data = trainingA, method = "glm")
train?
?train
nonPCA <- train(diagnosis ~ ., data = trainingA, method = "glm")
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ILdata <- grep("^[Ii][Ll].*", names(training))
trainingA <-training[, c(names(training)[ILdata], "diagnosis")]
names(trainingA)
testingA <-testing[, c(names(testing)[ILdata], "diagnosis")]
names(testingA)
nonPCA <- train(diagnosis ~ ., data = trainingA, method = "glm")
nonPCAtest <- confusionMatrix(testingA[ ,13], predict(nonPCA, testingA[ ,13]))
nonPCAtest <- confusionMatrix(testingA[ ,13], predict(nonPCA, testingA[ ,-13]))
nonPCAtest
PCAtrain <- preProcess(trainingA[ ,13], method = c("center", "scale", "pca"), thresh = 0.8)
PCAtrain <- preProcess(trainingA[ ,-13], method = c("center", "scale", "pca"), thresh = 0.8)
PCApredict <- predict(PCAtrain, trainingA[ ,-13])
PCApredictTest <- predict(PCAtrain, testingA[ ,-13])
PCAmodel <- train(trainingA$diagnosis ~ ., data = PCApredict, method = "glm")
PCAresult <- confusionMatrix(testingA[ , 13], predict(PCAmodel, PCApredictTest))
PCAresult
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
head(segmentationOriginal$Case)
inTrain <- segmentationOriginal$Case == "Train"
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
head(training)
head(testing$Case)
inTrain <- segmentationOriginal$Case == "Train"
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[!inTrain,]
head(testing$Case)
set.seed(125)
cartMod <- train(Class ~ ., method = "rpart", data = training)
cartMod$finalModel
plot(cartMod$finalModel, uniform = TRUE)
source('~/Dropbox/Practical Machine Learning Quiz 3.R', echo=TRUE)
text(cartmodel$finalModel, use.n = TRUE, all = TRUE, cex = 0.8)
text(cartMod$finalModel, use.n = TRUE, all = TRUE, cex = 0.8)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
head(newdata)
modFit <- train(Area ~ ., method = "rpart", data = olive)
predict(modFit, newdata = newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
missClass = function(values, prediction){sum(((prediction > 0.5) * 1) != values) / length(values)}
head(SAheart)
modFit4 <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
missClass(trainSA$chd, predict(modFit4, newdata = trainSA))
missClass(testSA$chd, predict(modFit4, newdata = testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
install.packages("randomForest")
library(randomForest)
modFit5 <- randomForest(y ~ ., data = vowel.train)
order(varImp(modFit5))
order(varImp(modFit5), decreasing = TRUE)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
pred1 <- train(y ~., method = "rf", data = vowel.train)
pred2 <- train(y ~., method = "gbm", data = vowel.train)
mod1 <- train(y ~., method = "rf", data = vowel.train)
mod2 <- train(y ~., method = "gbm", data = vowel.train)
pred1 <- predict(mod1, vowel.test)
pred2 <- predict(mod2, vowel.test)
confusionMatrix(pred1, vowel.test$y)
confusionMatrix(pred2, vowel.test$y)
confusionMatrix(pred2, vowel.test$y)$overall
confusionMatrix(pred1, vowel.test$y)$overall
pred3 <- data.frame(pred1, pred2, y = vowel.test$y)
sum(pred_rf[predDF$pred_rf == predDF$pred_gbm] ==
predDF$y[predDF$pred_rf == predDF$pred_gbm]) /
sum(predDF$pred_rf == predDF$pred_gbm)
sum(pred1[pred3$pred1 == pred3$pred2] ==
pred3$y[pred3$pred1 == pred3$pred2]) /
sum(pred3$pred1 == pred3$pred2)
idx_agreed <- (pred1 == pred2)
confusionMatrix(vowel.test$y[idx_agreed], pred1[idx_agreed])$overall['Accuracy']
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
names(training)
modRF <- train(diagnosis ~., data = training, method = "rf")
modGBM <- train(diagnosis ~., data = training, method = "gbm")
modLDA <- train(diagnosis ~., data = training, method = "lda")
modLDA <- train(diagnosis ~., data = training, method = "lda")
redRF <- predict(modRF, testing)
predGBM <- predict(modGBM, testing)
predLDA <- predict(modLDA, testing)
confusionMatrix(predRF, testing$diagnosis)$overall['Accuracy']
confusionMatrix(redRF, testing$diagnosis)$overall['Accuracy']
set.seed(62433)
modRF <- train(diagnosis ~., data = training, method = "rf")
modGBM <- train(diagnosis ~., data = training, method = "gbm")
modLDA <- train(diagnosis ~., data = training, method = "lda")
predRF <- predict(modRF, testing)
predGBM <- predict(modGBM, testing)
predLDA <- predict(modLDA, testing)
confusionMatrix(predRF, testing$diagnosis)$overall['Accuracy'] #.768
confusionMatrix(predGBM, testing$diagnosis)$overall['Accuracy']
confusionMatrix(predLDA, testing$diagnosis)$overall['Accuracy']
predCombo <- data.frame(predRF, predGBM, predLDA, diagnosis = testing$diagnosis)
Combo <- data.frame(predRF, predGBM, predLDA, diagnosis = testing$diagnosis)
modCombo <- train(diagnosis ~., data = Combo, method = "rf")
predCombo <- predict(modCombo, Combo)
confusionMatrix(predCombo, testing$diagnosis)$overall['Accuracy']
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
modLasso <- train(CompressiveStrength ~., data = training, method = "lasso")
modLasso <- train(CompressiveStrength ~., data = training, method = "lasso")
plot.enet(mod_lasso$finalModel, xvar = "penalty", use.color = TRUE)
plot.enet(modLasso$finalModel, xvar = "penalty", use.color = TRUE)
library(lubridate) # For year() function below
dat = read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate) # For year() function below
dat <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
training <- dat[year(dat$date) < 2012,]
testing <- dat[(year(dat$date)) > 2011,]
tstrain <- ts(training$visitsTumblr)
head(dat)
training <- dat[year(dat$date) < 2012,]
?year
install.packages("lubridate")
training <- dat[year(dat$date) < 2012,]
testing <- dat[(year(dat$date)) > 2011,]
tstrain <- ts(training$visitsTumblr)
?year
library(lubridate)
?year
training <- dat[year(dat$date) < 2012,]
testing <- dat[(year(dat$date)) > 2011,]
tstrain <- ts(training$visitsTumblr)
install.packages("forecast")
library(forecast)
modTS <- bats(tstrain)
fcTS <- forecast(modTS, level = 95, h = dim(testing)[1])
sum(fcTS$lower < testing$visitsTumblr & testing$visitsTumblr < fcTS$upper / dim(testing[1]))
sum(fcTS$lower < testing$visitsTumblr & testing$visitsTumblr < fcTS$upper) / dim(testing[1]
)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
install.packages("e1071")
library(e1071)
modSVM <- svm(CompressiveStrength ~., data = training)
predSVM <- predict(modSVM, testing)
accuracy(pred_svm, testing$CompressiveStrength)
SVMerror <- conc.pred.svm - testing$CompressiveStrength
sqrt(mean(SVMerror^2))
SVMerror <- predSVM - testing$CompressiveStrength
sqrt(mean(SVMerror^2))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
mod1 <- train(y ~., data = vowel.train, method = "rf")
mod2 <- train(y ~., data = vowel.train, method = "gbm")
pred1 <- predict(mod1, vowel.test)
pred2 <- predict(mod2, vowel.test)
confusionMatrix(pred1, vowel.test$y)$overall #.5974
confusionMatrix(pred2, vowel.test$y)$overall #.5303
idx_agreed <- (pred1 == pred2)
confusionMatrix(vowel.test$y[idx_agreed], pred1[idx_agreed])$overall['Accuracy']
library(caret)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
mod1 <- train(y ~., data = vowel.train, method = "rf")
mod2 <- train(y ~., data = vowel.train, method = "gbm")
pred1 <- predict(mod1, vowel.test)
pred2 <- predict(mod2, vowel.test)
confusionMatrix(pred1, vowel.test$y)$overall #.5974
confusionMatrix(pred2, vowel.test$y)$overall #.5303
idx_agreed <- (pred1 == pred2)
confusionMatrix(vowel.test$y[idx_agreed], pred1[idx_agreed])$overall['Accuracy']
install.packages("rattle")
head(training)
```
install.packages("rattle")
trainURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
training <- read.csv(url(trainURL), na.strings=c("NA",""), header=TRUE, sep = ",")
testing <- read.csv(url(testURL), na.strings=c("NA",""), header=TRUE, sep = ",")
library(caret)
library(randomForest)
library(rpart)
head(training, 2)
head(training)
length(names(training))
training <- training[, 8:length(names(training))]
testing <- testing[ ,8:length(names(testing))]
dim(testing)
tail(testing)
training <- training[ , !apply(training, 2, function(x) all(is.na(x)))]
dim(training)
testing <- testing[ , !apply(testing, 2, function(x) all(is.na(x)))]
dim(testing)
length(testing)
head(testing)
training <- training[ , !apply(training, 2, function(x) is.na(x) > 10)]
dim(training)
training <- training[ , !apply(training, 2, function(x) any(is.na(x)))]
dim(training)
testing <- testing[ , !apply(testing, 2, function(x) all(is.na(x)))]
trainURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
training <- read.csv(url(trainURL), na.strings=c("NA",""), header=TRUE, sep = ",")
testing <- read.csv(url(testURL), na.strings=c("NA",""), header=TRUE, sep = ",")
dim(training)
dim(testing)
library(caret)
library(randomForest)
library(rpart)
training <- training[, 8:length(names(training))]
testing <- testing[ ,8:length(names(testing))]
dim(testing)
dim(training)
training <- training[ , !apply(training, 2, function(x) any(is.na(x)))]
testing <- testing[ , !apply(testing, 2, function(x) any(is.na(x)))]
dim(testing)
dim(training)
names(training)
names(testing)
setdiff(training, testing)
setdiff(names(training), names(testing))
names(training)
names(testing)
testing$problem_id
head(training$classe)
tail(training$classe)
set.seed(222324)
inTrain <- createDataPartition(training$classe, p = 0.75, list = FALSE)
training <- training[inTrain, ]
crossVal <- training[-inTrain, ]
modRF <- train(classe ~ ., method = "rf", data = training)
modRF <- train(classe ~ ., method = "rf", data = training)
dim(training)
modRF <- train(classe ~ ., method = "rf", data = training)
modRF <- randomForest(classe ~ . , data = training)
predictRF <- predict(modRF, testing)
confusionMatrix(predictRF, testing$classe)
modRF
modRF <- train(classe ~ . , data = training, method = "rf")
head(testing, 20)
num <- which(lapply(training, class) %in% "numeric")
trainURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainRaw <- read.csv(url(trainURL), na.strings=c("NA",""), header=TRUE, sep = ",")
testRaw <- read.csv(url(testURL), na.strings=c("NA",""), header=TRUE, sep = ",")
library(caret)
library(randomForest)
library(rpart)
training <- trainRaw[, 8:length(names(trainRaw))]
testing <- testRaw[ ,8:length(names(testRaw))]
training <- training[ , !apply(training, 2, function(x) any(is.na(x)))]
testing <- testing[ , !apply(testing, 2, function(x) any(is.na(x)))]
num <- which(lapply(training, class) %in% "numeric")
class(testing)
?lapply
lapply(testing, class)
lapply(testing, class("numeric"))
training[1:52] <- lapply(training[1:52], as.numeric)
testing[1:53] <- lapply(testing[1:53], as.numeric)
lapply(testing, class)
set.seed(222324)
inTrain <- createDataPartition(training$classe, p = 0.75, list = FALSE)
training <- training[inTrain, ]
crossVal <- training[-inTrain, ]
modRF <- train(classe ~ . , data = training, method = "rf")
trainClean <- trainRaw[, 8:length(names(trainRaw))]
testClean <- testRaw[ ,8:length(names(testRaw))]
trainClean <- trainClean[ , !apply(trainClean, 2, function(x) any(is.na(x)))]
testClean <- testClean[ , !apply(testClean, 2, function(x) any(is.na(x)))]
zeroTr  <- nearZeroVar(trainClean, saveMetrics = TRUE)
trainClean <- trainClean[ ,zeroTr$zeroTr == FALSE]
zeroTe <- nearZeroVar(testClean, saveMetrics = TRUE)
testClean <- testClean[ ,zeroTe$zeroTe== FALSE]
zeroTe
trainClean <- trainRaw[, 8:length(names(trainRaw))]
testClean <- testRaw[ ,8:length(names(testRaw))]
trainClean <- trainClean[ , !apply(trainClean, 2, function(x) any(is.na(x)))]
testClean <- testClean[ , !apply(testClean, 2, function(x) any(is.na(x)))]
setdiff(names(trainClean), names(testClean))
tail(trainClean, 1)
training[1:52] <- lapply(trainClean[1:52], as.numeric)
testing[1:53] <- lapply(testClean[1:53], as.numeric)
trainClean[1:52] <- lapply(trainClean[1:52], as.numeric)
testClean[1:53] <- lapply(testClean[1:53], as.numeric)
set.seed(222324)
inTrain <- createDataPartition(training$classe, p = 0.75, list = FALSE)
training <- training[inTrain, ]
crossVal <- training[-inTrain, ]
set.seed(222324)
inTrain <- createDataPartition(trainClean$classe, p = 0.75, list = FALSE)
training <- training[inTrain, ]
crossVal <- training[-inTrain, ]
?train
modRF <- train(classe ~ . , data = training, method = "rf")
modRF <- train(classe ~ . , data = training, method = "rf", trControl = contRF)
contRF <- trainControl(method="cv", number=3, verboseIter=FALSE)
modRF <- train(classe ~ . , data = training, method = "rf", trControl = contRF)
predictRF <- predict(modRF, testing)
confusionMatrix(predictRF, testing$classe)
confusionMatrix(predictRF, testing)
predictRF <- predict(modRF, training)
confusionMatrix(predictRF, training$classe)
class(training$classe)
training$classe
trainURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainRaw <- read.csv(url(trainURL), na.strings=c("NA","#DIV/0!",""), header=TRUE, sep = ",")
testRaw <- read.csv(url(testURL), na.strings=c("NA","#DIV/0!",""), header=TRUE, sep = ",")
library(caret)
library(randomForest)
library(rpart)
trainClean <- trainRaw[, 8:length(names(trainRaw))]
testClean <- testRaw[ ,8:length(names(testRaw))]
trainClean <- trainClean[ , !apply(trainClean, 2, function(x) any(is.na(x)))]
testClean <- testClean[ , !apply(testClean, 2, function(x) any(is.na(x)))]
setdiff(names(trainClean), names(testClean))
trainClean[1:52] <- lapply(trainClean[1:52], as.numeric)
testClean[1:53] <- lapply(testClean[1:53], as.numeric)
trainClean$classe <- as.factor(trainClean$classe)
trainClean[ , .N, classe]
trainClean$classe
library(plyr)
count(trainClean$classe)
set.seed(222324)
inTrain <- createDataPartition(trainClean$classe, p = 0.75, list = FALSE)
training <- training[inTrain, ]
crossVal <- training[-inTrain, ]
set.seed(222324)
inTrain <- createDataPartition(trainClean$classe, p = 0.75, list = FALSE)
training <- trainClean[inTrain, ]
crossVal <- trainClean[-inTrain, ]
contRF <- trainControl(method="cv", number=3, verboseIter=FALSE)
modRF <- train(classe ~ . , data = training, method = "rf", trControl = contRF)
predictRF <- predict(modRF, training)
confusionMatrix(predictRF, training$classe)
predictRF <- predict(modRF, crossVal)
confusionMatrix(predictRF, crossVal$classe)$overall["Accuracy"]
confusionMatrix(predictRF, crossVal$classe)
modRF$finalModel
predictTest <- predict(modRF, newdata = testClean)
confusionMatrix(predictTest, testClean$classe)
predictTest
setwd("~/Dropbox/Prediction Model Project")
?train
?trainControl
